{"componentChunkName":"component---src-templates-content-template-js","path":"/osa13/relaatiotietokannan_kaytto_sequelize_kirjastolla","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Tässä osassa tutustutaan relaatiotietokantoja käyttäviin node-sovelluksiin. Osassa rakennetaan osista 3-5 tutulle muistiinpanosovellukselle relaatiotietokantaa käyttävä node-backend. Osan suorittaminen edellyttää kohtuullista relaatiotietokantojen ja SQL:n osaamista.Eräs paikka hankkia riittävä osaaminen on kurssi <a href=\"https://tikape.mooc.fi/\">Tietokantojen perusteet</a>.</p>\n<h3>Dokumenttitietokantojen edut ja haitat</h3>\n<p>Olemme käyttäneet kaikissa kurssin aiemmissa osissa MongoDB-tietokantaa. Mongo on tyypiltään <a href=\"https://en.wikipedia.org/wiki/Document-oriented_database\">dokumenttitietokanta</a> ja eräs sen ominaisimmista piirteistä on <em>skeemattomuus</em>, eli tietokanta ei ole kuin hyvin rajallisesti tietoinen siitä, minkälaista dataa sen kokoelmiin on talletettu. Tietokannan skeema on olemassa ainoastaan ohjelmakoodissa, joka tulkitsee datan tietyllä tavalla, esim. tunnistaen että jotkut kentät ovat viittauksia toisen kokoelman objekteihin.</p>\n<p>Osien 3 ja 4 esimerkkisovelluksessa tietokantaan on talletettu muistiinpanoja ja käyttäjiä. </p>\n<p>Muistiinpanoja tallettava kokoelma 'notes' näyttää seuraavanlaiselta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0e410d10256466898a6c\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML is easy\"</span>\n    <span class=\"token string\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span>T11<span class=\"token operator\">:</span><span class=\"token number\">53</span><span class=\"token operator\">:</span><span class=\"token number\">37.292</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token string\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0edde86c7264ace9bb78\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS is hard\"</span>\n    <span class=\"token string\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">23</span>T11<span class=\"token operator\">:</span><span class=\"token number\">56</span><span class=\"token operator\">:</span><span class=\"token number\">13.912</span><span class=\"token operator\">+</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token string\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Käyttäjät tallettava kokoelma 'users' seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"600c0e410d10256466883a6a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"passwordHash\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"$2b$10$Df1yYJRiQuu3Sr4tUrk.SerVz1JKtBHlBOARfY0PBn/Uo7qr8Ocou\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"__v\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n    notes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token number\">600</span>c0edde86c7264ace9bb78<span class=\"token punctuation\">,</span>\n      <span class=\"token number\">600</span>c0e410d10256466898a6c\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>MongoDB tuntee kyllä talletettujen olioiden kenttien tyypit, mutta sillä ei ole mitään tietoa siitä, minkä kokoelman olioihin käyttäjiin liittyvät muistiinpanojen id:t viittaavat. MongoDB ei myöskään välitä siitä, mitä kenttiä kokoelmiin talletettavilla olioilla on. MongoDB jättääkin täysin ohjelmoijan vastuulle sen, että tietokantaan talletetaan oikeanlaista tietoa.</p>\n<p>Skeemattomuudesta on sekä etua että haittaa. Eräänä etuna on skeemattomuuden tuoma joustavuus, koska skeemaa ei tarvitse tietokantatasolla määritellä, voi sovelluskehitys olla tietyissä tapauksissa nopeampaa, ja helpompaa, skeeman määrittelyssä ja sen muutoksissa on jokatapauksessa nähtävä pieni määrä vaivaa. Skeemattomuuden ongelmat liittyvät virhealttiuteen, kaikki jää ohjelmoijan vastuulle, tietokannalla ei ole mitään mahdollisuuksia tarkistaa onko siihen talletettu data <em>eheää</em>, eli onko kaikilla pakollisilla kentillä arvot, viittaavatko viitetyyppiset kentät olemassaoleviin ja ylipäätään oikean tyyppisiin olioihin jne.</p>\n<p>Tämän osan fokuksessa olevat relaatiotietokannat taas nojaavat vahvasti skeeman olemassaoloon, ja skeemallisten tietokantojen edut ja haitat ovat lähes päinvastaiset skeemattomiin verrattuna.</p>\n<p>Syy sille miksi kurssin aiemmat osat käyttivät MongoDB:tä liittyvät juuri sen skeemattomuuteen, jonka ansiosta tietokannan käyttö on ollut relaatiotietokantoja käyttämättömälle hieman helpompaa. Useimpiin tämänkin kurssin käyttötapauksiin olisin itse valinnut relaatiotietokannan.</p>\n<h3>Sovelluksen tietokanta</h3>\n<p>Tarvitsemme sovellustamme varten reelaatiotietokannan tietokannan. Vaihtoehtoja on monia, käytämmä tällä kurssilla tämän hetken suosituinta Open Source -ratkaisua <a href=\"https://www.postgresql.org/\">PostgreSQL:ää</a>. Voit halutessasi asentaa Postgresin (kuten tietokantaa usein kutsutaan) koneellesi, helpommalla pääset käyttämällä jotain pilvipalveluna tarjottavaa postgresia, esim. <a href=\"https://www.elephantsql.com/\">ElephantSQL:ää</a>. Voit myös hyödyntää kurssin <a href=\"/en/part12\">osan 12</a> oppeja ja käyttää Postgresia paikallisesti Dockerin avulla.</p>\n<p>Käytämme nyt kuitenkin hyväkseen sitä, että osista 3 ja 4 tuttu pilvipalvelualusta Herokuun on mahdollista luoda sovellukselle Postgres-tietokanta. </p>\n<p>Tämän osan teoriamateriaalissa rakennetaan oissa 3 ja 4 rakennetun muistiinpanoja tallettavan sovelluksen backendendistä Postgresia käyttävä versio.</p>\n<p>Luodaan nyt sopivan hakemiston sisällä heroku-sovellus, lisätään sille tietokanta ja katsotaan komennolla <code class=\"language-text\">heroku config</code> mikä on tietokantayhteyden muodostamiseen tarvittava <i>connect string</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku create\nheroku addons:create heroku-postgresql:hobby-dev\nheroku config\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> cryptic-everglades-76708 Config Vars\nDATABASE_URL: postgres://<span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>@ec2-44-199-83-229.compute-1.amazonaws.com:5432/<span class=\"token operator\">&lt;</span>db-name<span class=\"token operator\">></span></code></pre></div>\n<p>Erityisesti relaatiotietokantaa käytettäessä on oleellista päästä tietokantaan käsiksi myös suoraan. Tapoja tähän on monia, on olemasa mm. useita erilaisia graafisia käyttöliittymiä, kuten <a href=\"https://www.pgadmin.org/\">pgAdmin</a>. Käytetään kuitenkin postgresin <a href=\"https://www.postgresql.org/docs/current/app-psql.html\">pqsl</a>-komentorivityökalua.</p>\n<p>Tietokantaan päästään käsiksi suorittamalla <code class=\"language-text\">psql</code> herokun palvelimella seuraavasti (huomaa, että komennon parametrit riippuvat heroku-sovelluksen connect urlista):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku run psql -h ec2-44-199-83-229.compute-1.amazonaws.com -p <span class=\"token number\">5432</span> -U <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>dbname<span class=\"token operator\">></span></code></pre></div>\n<p>Salasanan antamisen jälkeen kokeillaan pslq:n tärkeintä komentoa <code class=\"language-text\">\\d</code>, joka kertoo tietokannan sisällön:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Password <span class=\"token keyword\">for</span> user <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>:\npsql <span class=\"token punctuation\">(</span><span class=\"token number\">13.4</span> <span class=\"token punctuation\">(</span>Ubuntu <span class=\"token number\">13.4</span>-1.pgdg20.04+1<span class=\"token punctuation\">))</span>\nSSL connection <span class=\"token punctuation\">(</span>protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: <span class=\"token number\">256</span>, compression: off<span class=\"token punctuation\">)</span>\nType <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help.\n\n<span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span>d\nDid not <span class=\"token function\">find</span> any relations.</code></pre></div>\n<p>Kuten arvata saattaa, tietokannassa ei ole mitään. </p>\n<p>Luodaan taulu muistiinpanoja varten:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> notes <span class=\"token punctuation\">(</span>\n    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    content <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    important <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">date</span> <span class=\"token keyword\">time</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>TODO: ehkä important kentälle DEFAULT FALSE, niin oletusarvojen määrittely tulee tutuksi</em></p>\n<p>Muutama huomio: sarake id on määritelty <i>pääavaimeksi</i> (engl. primary key), eli sarakkeen arvo tulee olla jokaisella taulun rivillä uniikki ja arvo ei saa olla tyhjä. Tyypiksi sarakkeelle on määritelty <a href=\"https://www.postgresql.org/docs/9.1/datatype-numeric.html#DATATYPE-SERIAL\">SERIAL</a>, joka ei ole todellinen tyyppi vaan lyhennysmerkintä sille, että kyseessä on kokonaislukuarvoinen sarake, jolle Postgres antaa automaattisesti uniikin, kasvavan arvon rivejä luotaessa. Tekstiarvoiselle sarakkeelle <i>content</i> on määritelty siten, että sille on pakko antaa arvo.</p>\n<p>Katsotaan tilannetta konsolista käsin. Ensin komento <code class=\"language-text\">\\d</code>, joka kertoo mitä tauluja kannasa on:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">username<span class=\"token operator\">=</span><span class=\"token operator\">></span> \\d\n                 List <span class=\"token keyword\">of</span> relations\n <span class=\"token keyword\">Schema</span> <span class=\"token operator\">|</span>     Name     <span class=\"token operator\">|</span>   <span class=\"token keyword\">Type</span>   <span class=\"token operator\">|</span>     Owner\n<span class=\"token comment\">--------+--------------+----------+----------------</span>\n <span class=\"token keyword\">public</span> <span class=\"token operator\">|</span> notes        <span class=\"token operator\">|</span> <span class=\"token keyword\">table</span>    <span class=\"token operator\">|</span> username\n <span class=\"token keyword\">public</span> <span class=\"token operator\">|</span> notes_id_seq <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span> username\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Taulun <code class=\"language-text\">notes</code> lisäksi Postgres loi aputaulun <code class=\"language-text\">notes_id_seq</code>, joka pitää kirjaa siitä, mikä arvo sarakkeelle <code class=\"language-text\">id</code> annetaan seuraavaksi. </p>\n<p>Komennolla <code class=\"language-text\">\\d notes</code> näemme miten taulu <code class=\"language-text\">notes</code> on määritelty:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">username<span class=\"token operator\">=</span><span class=\"token operator\">></span> \\d notes<span class=\"token punctuation\">;</span>\n                                     <span class=\"token keyword\">Table</span> <span class=\"token string\">\"public.notes\"</span>\n  <span class=\"token keyword\">Column</span>   <span class=\"token operator\">|</span>          <span class=\"token keyword\">Type</span>          <span class=\"token operator\">|</span> Collation <span class=\"token operator\">|</span> Nullable <span class=\"token operator\">|</span>              <span class=\"token keyword\">Default</span>\n<span class=\"token comment\">-----------+------------------------+-----------+----------+-----------------------------------</span>\n id        <span class=\"token operator\">|</span> <span class=\"token keyword\">integer</span>                <span class=\"token operator\">|</span>           <span class=\"token operator\">|</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">|</span> nextval<span class=\"token punctuation\">(</span><span class=\"token string\">'notes_id_seq'</span>::regclass<span class=\"token punctuation\">)</span>\n content   <span class=\"token operator\">|</span> <span class=\"token keyword\">text</span>                   <span class=\"token operator\">|</span>           <span class=\"token operator\">|</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">|</span>\n important <span class=\"token operator\">|</span> <span class=\"token keyword\">boolean</span>                <span class=\"token operator\">|</span>           <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span>\n <span class=\"token keyword\">date</span>      <span class=\"token operator\">|</span> <span class=\"token keyword\">time</span> without <span class=\"token keyword\">time</span> zone <span class=\"token operator\">|</span>           <span class=\"token operator\">|</span>          <span class=\"token operator\">|</span>\nIndexes:\n    <span class=\"token string\">\"notes_pkey\"</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">btree</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sarakkeella <code class=\"language-text\">id</code> on siis oletusarvo (default), joka saadaan kutsumalla postgresin sisäistä funktiota <code class=\"language-text\">nextval</code>. </p>\n<p>Lisätään tauluun hieman sisältöä:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> notes <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> notes <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>TODO: kentän lisääminen, joka ei ole skeemassa. Näkyisi selkeesti skeema vs. ei-skeemaa</em></p>\n<p>Ja katsotaan miltä luotu sisältö näyttää:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">username<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> notes<span class=\"token punctuation\">;</span>\n id <span class=\"token operator\">|</span>               content               <span class=\"token operator\">|</span> important <span class=\"token operator\">|</span> <span class=\"token keyword\">date</span>\n<span class=\"token comment\">----+-------------------------------------+-----------+------</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> relational <span class=\"token keyword\">databases</span> <span class=\"token keyword\">rule</span> the world <span class=\"token operator\">|</span> t         <span class=\"token operator\">|</span>\n  <span class=\"token number\">2</span> <span class=\"token operator\">|</span> MongoDB <span class=\"token operator\">is</span> webscale                 <span class=\"token operator\">|</span> f         <span class=\"token operator\">|</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Seuraavaksi on aika siirtyä käyttämään tietokantaa sovelluksesta käsin.</p>\n<h3>Relaatiotietokantaa käyttävä node-sovellus</h3>\n<p>Alustetaan sovellus tavalliseen tapaan komennolla <i>npm init</i> ja asennetaan sille kehitysaikaiseksi riippuvuudeksi 'nodemon' seka seuraavat suoritusaikaiset riippuvuudet:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express dotenv pg sequelize</code></pre></div>\n<p>Näistä jälkimmäinen <a href=\"https://sequelize.org/master/\">sequelize</a> on kirjasto, jonka kautta käytämme Postgresia. Sequelize on niin sanottu <a href=\"https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping\">Object relational mapping</a> (ORM) -kirjasto, joka mahdollistaa JavaScript-olioiden tallentamisen relaatiotietokantaan ilman SQL-kielen käyttöä, samaan tapaan kuin MongoDB:n yhteydessä käyttämämme Mongoose-kirjasto.</p>\n<p>Testataan että yhteyden muodostaminen onnistuu. Luodaan tiedosto <code class=\"language-text\">index.js</code> ja sille seuraava sisältö:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection has been established successfully.'</span><span class=\"token punctuation\">)</span>\n    sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to connect to the database:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Komennon <code class=\"language-text\">heroku config</code> paljastama tietokannan <i>connect string</i> tulee tallentaa tiedostoon <code class=\"language-text\">.env</code>, jonka sisällön pitää siis olla suunilleen seuraava</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> .env\n<span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span>postgres://<span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>password<span class=\"token operator\">></span>@ec2-54-83-137-206.compute-1.amazonaws.com:5432/<span class=\"token operator\">&lt;</span>databasename<span class=\"token operator\">></span></code></pre></div>\n<p>Kokeillaan muodostuuko yhteys:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\nExecuting <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>: SELECT <span class=\"token number\">1</span>+1 AS result\nConnection has been established successfully.</code></pre></div>\n<p>Jos ja kun yhteys toimii, voimme tehdä ensimmäisen kyselyn. Muutetaan ohjelmaa seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> QueryTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM notes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> QueryTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to connect to the database:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Sovelluksen suorituksen pitäisi tulostaa seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token constant\">FROM</span> notes\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Relational databases rule the world'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'MongoDB is webscale'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Vaikka sequelize on ORM-kirjasto, jota käyttämällä SQL:ää ei juurikaan ole tarvetta itse kirjoittaa, käytimme nyt <a href=\"https://sequelize.org/master/manual/raw-queries.html\">suoraan SQL:ää</a> sequelizen metodin <a href=\"https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-method-query\">query</a> avulla.</p>\n<p>Koska kaikki näyttää toimivan, muutetaan sovellus web-sovellukseksi.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> QueryTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM notes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> QueryTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">SELECT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span></span><span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Sovellus näyttää toimivan. Siirrytään kuitenkin nyt käyttämään Sequelizeä SQL:n sijaan siten kuin sitä on tarkoitettu käyttää.</p>\n<h3>Model</h3>\n<p>Sequelizea käytettäessä, jokaista tietokannan taulua edustaa <a href=\"https://sequelize.org/master/manual/model-basics.html\">model</a>, joka on käytännössä oma JavaScript-luokkansa. Määritellän nyt sovellukselle taulua <code class=\"language-text\">notes</code> vastaava model <code class=\"language-text\">Note</code> muuttamalla koodi seuraavaan muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Sequelize<span class=\"token punctuation\">,</span> Model<span class=\"token punctuation\">,</span> DataTypes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sequelize'</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DATABASE_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  dialectOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ssl<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      require<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      rejectUnauthorized<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Note</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INTEGER</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    autoIncrement<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  important<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">BOOLEAN</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  date<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> DataTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  sequelize<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  underscored<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  timestamps<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  modelName<span class=\"token operator\">:</span> <span class=\"token string\">'note'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Muutama kommentti koodista. Modelin <code class=\"language-text\">Note</code> määrittelyssä ei ole mitään kovin yllättävää, jokaiselle sarakkeelle on määritelty tyyppi, sekä tarvittaessa muut ominaisuudet, kuten se onko kyseessä taulun pääavain. Modelin määrittelyssä oleva toinen parametri sisältää <code class=\"language-text\">sequelize</code>-olion sekä muuta konfiguraatiotietoa. Märittelimme, että taululla ei ole usein käytettykä aikaleimasarakkeita (created_at ja updated_at).</p>\n<p><em>TODO: underscored: true ja sarakkeiden nimet</em></p>\n<p>Määrittelmimme myös, että taulujen nimet päätellään modelien nimistä \"underscored\"-tekniikalla. Käytännössä tämä tarkoittaa sitä, että jos modelin nimi on kuten tapauksessamme <code class=\"language-text\">Note</code> päätellän siitä, että vastaavan taulun nimi on pienellä alkukirjaimella kirjoitettu nimen monikko eli <code class=\"language-text\">notes</code>. Jos taas modelin nimi olisi \"kaksiosainen\" esim. <code class=\"language-text\">StudyGroup</code> olisi taulun nimi <code class=\"language-text\">study_groups</code>. Sequelize mahdollistaa automaattisen taulujen nimien päättelun sijaan myös eksplisiittisesti määriteltävät taulujen nimet. </p>\n<p>Olemme myös määritelleet <code class=\"language-text\">modelName: &#39;note&#39;</code>, oletusarvoinen \"modelin nimi\" olisi isolla kirjoitettu <code class=\"language-text\">Note</code>, haluamme kuitenkin pienen alkukirjaimen, se tekee muutaman asian jatkossa hieman mukavammaksi.</p>\n<p>Tietokantaoperaatio on helppo tehdä modelien tarjoaman <a href=\"https://sequelize.org/master/manual/model-querying-basics.html\">kyselyrajapinnan</a> avulla, metodi <code class=\"language-text\">findAll</code> toimii juuri kuten sen nimen perusteella olettaa toimivan:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Konsoli kertoo että metodikutsu <i>Note.findAll()</i> aiheuttaa seuraavan kyselyn:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Executing</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">SELECT</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"important\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span> <span class=\"token constant\">FROM</span> <span class=\"token string\">\"notes\"</span> <span class=\"token constant\">AS</span> <span class=\"token string\">\"note\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Toteutetaan seuraavaksi endpoint uusien muistiinpanojen luomiseen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Uuden muistiinpanon luominen siis tapahtuu kutsumalla modelin <code class=\"language-text\">Note</code> metodia <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#simple-insert-queries\">create</a> ja antamalla sille parametriksi sarakkeiden arvot määrittelevän olion.</p>\n<p>Metodin <i>create</i> sijaan tietokantaan tallentaminen <a href=\"https://sequelize.org/master/manual/model-instances.html#creating-an-instance\">olisi mahdollista tehdä</a> käyttäen ensin metodia <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#static-method-build\">build</a> luomaan halutusta datasta Model-olio, ja kutsumalla sille metodia <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#instance-method-save\">save</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Metodin <i>build</i> kutsuminen ei tallenna vielä olioa tietokantaan, joten olioa on vielä mahdollista muokata ennen varsinaista talletustapahtumaa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></span><span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Esimerkkikoodin käyttötapaukseen metodi <a href=\"https://sequelize.org/master/manual/model-querying-basics.html#simple-insert-queries\">create</a> sopii paremmin, joten pidättäydytää siinä.</p>\n<p>Jos luotava olio ei ole validi, on seurauksena virheilmoitus. Esim. yritettäessä luoda muistiinpano ilman sisältöä\noperaatio epäonnistuu, ja konsoli paljastaa syyn olevan <code class=\"language-text\">SequelizeValidationError: notNull Violation Note.content cannot be null</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(node:39109) UnhandledPromiseRejectionWarning: SequelizeValidationError: notNull Violation: Note.content cannot be null\n    at InstanceValidator._validate (/Users/mluukkai/opetus/fs-psql/node_modules/sequelize/lib/instance-validator.js:78:13)\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)</code></pre></div>\n<p>Lisätään uuden muistiinpanon lisäämisen yhteyteen vielä yksinkertainen virheenkäsittely:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"tasks\">\n<h3>Tehtävät 13.1.-13.3.</h3>\n<p>Teemme tämän osan tehtävissä <a href=\"/osa4\">osan 4</a> tehtävien kanssa samanlaisen blogi-sovelluksen backendin, jonka pitäisi olla virheenkäsittelyä lukuunottamatta yhteensopiva <a href=\"/osa5\">osan 5</a> frontendin kanssa. Teemme backendiin myös joukon ominaisuuksia, joita osassa 5 tehty fronend ei osaa hyödyntää.</p>\n<h4>Tehtävä 13.1.</h4>\n<p>Tee sovellukselle GitHub-repositorio ja luo sen sisällä sovellusta varten heroku-sovellus sekä Postgres-tietokanta. Varmista, että saat luotua yhteyden sovellusken tietokantaan.</p>\n<h4>Tehtävä 13.2.</h4>\n<p>Luo sovellukselle komentoriviltä taulu <i>blogs</i> jolla on seuraavat sarakkeet</p>\n<ul>\n<li>id (uniikki, kasvava id)</li>\n<li>author (merkkijono)</li>\n<li>url (merkkijono joka ei voi olla tyhjä)</li>\n<li>title (merkkijono joka ei voi olla tyhjä)</li>\n<li>likes (kokonaisluku jolla oletusarvo nolla)</li>\n</ul>\n<p>Lisää tietokantaan ainakin kaksi blogia</p>\n<h4>Tehtävä 13.3.</h4>\n<p>Tee sovellukseen komentoriviltä käytettävä toiminnallisuus, joka tulostaa tietokannassa olevat blogit, esim. seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node cli.js\nExecuting <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>: SELECT * FROM blogs\nDan Abramov: <span class=\"token string\">'On let vs const'</span>, <span class=\"token number\">0</span> likes\nLaurenz Albe: <span class=\"token string\">'Gaps in sequences in PostgreSQL'</span>, <span class=\"token number\">0</span> likes</code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Tietokantataulujen automaattinen luominen</h3>\n<p>Sovelluksessamme on nyt yksi ikävä puoli, se olettaa että täsmälleen oikean skeeman omaava tietokanta on olemassa, eli että taulu <code class=\"language-text\">notes</code> on luotu sopivalla <code class=\"language-text\">create table</code> -komennolla.</p>\n<p>Koska ohjelmakoodi säilytetään Githubissa, olisi järkevää säilyttää myös tietokannan luovat komennot ohjelmakoodin yhteydessä, jotta tietokannan skeema on varmasti sama mitä ohjelmakoodi odottaa. Sequelize pystyy itseasiassa generoimaan skeeman automaattisesti modelien määritelmästä modelien metodin <a href=\"https://sequelize.org/master/manual/model-basics.html#model-synchronization\">sync</a> avulla. </p>\n<p>Tuhotaan nyt tietokanta konsolista käsin antamalla seuraava komento:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">drop table notes;</code></pre></div>\n<p>Koment <code class=\"language-text\">\\d</code> paljastaa että taulu on hävinnyt tietokannasta:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">username=&gt; \\d\nDid not find any relations.</code></pre></div>\n<p>Sovellus ei enää toimi. </p>\n<p>Lisätään sovellukseen seuraava komento heti modelin <code class=\"language-text\">Note</code> määrittelyn jälkeen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kun sovellus käynnistyy, tulostuu konsoliin seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Executing (default): CREATE TABLE IF NOT EXISTS &quot;notes&quot; (&quot;id&quot;  SERIAL , &quot;content&quot; TEXT NOT NULL, &quot;important&quot; BOOLEAN, &quot;date&quot; TIMESTAMP WITH TIME ZONE, PRIMARY KEY (&quot;id&quot;));</code></pre></div>\n<p>Eli sovelluksen käynnistyessä suoritetaan komento <code class=\"language-text\">CREATE TABLE IF NOT EXISTS &quot;notes&quot;...</code> joka luo taulun <code class=\"language-text\">notes</code> jos se ei jo ole olemassa.</p>\n<h3>Muut operaatiot</h3>\n<p>Täydennetään sovellusta vielä muutamalla operaatiolla. </p>\n<p>Yksittäisen muistiinpanon etsiminen onnistuu metodilla <a href=\"https://sequelize.org/master/manual/model-querying-finders.html\">findByPk</a> koska se haetaan pääavaimena toimivan id:n perusteella:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Yksittäisen muistiinpanon hakeminen aiheuttaa seuraavanlaisen SQL-komennon:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Executing (default): SELECT &quot;id&quot;, &quot;content&quot;, &quot;important&quot;, &quot;date&quot; FROM &quot;notes&quot; AS &quot;note&quot; WHERE &quot;note&quot;.&quot;id&quot; = &#39;1&#39;;</code></pre></div>\n<p>Jos muistiinpanoa ei löydy, palauttaa operaation <code class=\"language-text\">null</code>, ja tässä tapauksessa annetaan asiaan kuuluva statuskoodi.</p>\n<p>Muistiinpanon muuttaminen tapahtuu seuraavasti. Tuetaan ainoastaan kentän <code class=\"language-text\">important</code> muutosta, sillä sovelluksen frontend ei muuta tarvitse:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>important\n    <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tietokantariviä vastaava olio haetaan kannasta <code class=\"language-text\">findByPk</code>-metodilla, olioon tehdään muutos ja lopputulos tallennetaan kutsumalla tietokantariviä vastaavan olion metodia <code class=\"language-text\">save</code>.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/fullstack-hy/part122-notes/tree/part12-1\">githubissa</a>, branchissa <i>part12-1</i>.</p>\n<h3>Sequelizen palauttamien olioiden tulostaminen konsoliin</h3>\n<p>JavaScript-ohjelmoijan tärkein apuväline on <i>console.log</i>, jonka aggressiivinen käyttö saa pahimmatkin bugit kuriin. Lisätään yksittäisen muistiinpanon reittiin konsolitulostus:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Huomaamme, että lopputulos ei ole ihan se mitä odotimme:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note <span class=\"token punctuation\">{</span>\n  dataValues<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">03</span>T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24.582</span>Z<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _previousDataValues<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">03</span>T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24.582</span>Z<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _changed<span class=\"token operator\">:</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  _options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    isNewRecord<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    _schema<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    _schemaDelimiter<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'important'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'date'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  isNewRecord<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Muistiinpanon tietojen lisäksi konsoliin tulostuu kaikenlaista muutakin. Pääsemme toivottuun lopputulokseen kutsumalla model-olion metodia <a href=\"https://sequelize.org/master/class/lib/model.js~Model.html#instance-method-toJSON\">toJSON</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByPk</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nyt lopputulos on juuri se mitä haluamme.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  content<span class=\"token operator\">:</span> <span class=\"token string\">'Notes are attached to a user'</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">03</span>T15<span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">24.582</span>Z<span class=\"token punctuation\">,</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jos kyse on kokoelmallisesta olioita, ei metodi toJson toimi suoraan, metodia on kutsuttava erikseen jokaiselle kokoelman oliota: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token operator\">=></span>n<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ehkä parempi ratkaisu on kuitenkin muuttaa kokoelma JSON:iksi tulostamista varten: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tämä tapa on parempi erityisesti jos kokoelman oliot sisältävät muita olioita. Usein on myös hyödyllistä muotoilla oliot ruudulle hieman lukijaystävällisempään muotoon. Tämä onnistuu komennolla:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">console.log(JSON.stringify(notes<span class=\"token punctuation\">,</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>)) </code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävä 13.4.</h3>\n<h4>Tehtävä 13.4.</h4>\n<p>Muuta sovelluksesi web-sovellukseksi, joka seuraavia operaatioita</p>\n<ul>\n<li>GET api/blogs (kaikkien blogien listaus)</li>\n<li>POST api/blogs (uuden blogin lisäys)</li>\n<li>DELETE api/blogs/:id (blogin poisto)</li>\n</ul>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/255b3daaf137d97fa5b78561e6ef4e3f/part-13.svg"},"part":13,"letter":"a","lang":"fi"}}},"pageContext":{"part":13,"letter":"a","lang":"fi"}}}